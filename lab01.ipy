{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "lab1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyP+K9b5QUz935+NopKb0bSu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/luisutr/Clases-Python-2020-/blob/main/lab01.ipy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UVwViv808lQH",
        "outputId": "3a953382-dd32-416a-8aa8-bcf3834d7170",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 126
        }
      },
      "source": [
        "from math import *\n",
        "\n",
        "def libras_a_gramos(libras):\n",
        "  #recibe libras en la varibale de entrada, creo una varibale que sean gramos, multiplico por el valor de gramos de una libra y devuelvo el resultado\n",
        "  gramos = 453.59237 * libras \n",
        "  return gramos \n",
        "\n",
        "def declinacion(dia):\n",
        "  d = 23.45 * sin(((2*pi) * (dia + 284))/365)\n",
        "  return d\n",
        "\n",
        "def area_jardin(r):\n",
        "  diam = 2 * r\n",
        "  areacu = (diam**2)/2\n",
        "  areaci = (pi)*(r**2)\n",
        "  return areaci - areacu\n",
        "\n",
        "def area_jardin(r):\n",
        "    A_jardin = (pi)*(r**2) - 2*(r**2)\n",
        "    return A_jardin\n",
        "\n",
        "def momento_inercia_tubo(m,a,b):\n",
        "  i = (1/2) * (m*(a**2 + b**2))\n",
        "  return float(i)\n",
        "\n",
        "# ρ=a(1+cos θ)\n",
        "def cardioide(a,theta):\n",
        "  p = a*(1+cos(theta))\n",
        "  return p\n",
        "\n",
        "def empuje_cohete(m,v,a,pe,pa):\n",
        "    f=(m*v)+(a*(pe-pa))\n",
        "    return float(f)\n",
        "\n",
        "def angulos_triangulo(a,b,c):\n",
        "  A = acos((b**2 + c**2 - a**2)/(2*b*c))\n",
        "  B = acos((a**2 + c**2 - b**2)/(2*a*c))\n",
        "  C = acos((a**2 + b**2 - c**2)/(2*a*b))\n",
        "  return A, B, C\n",
        "\n",
        "def velocidad_escape(g,r):\n",
        "  ve = sqrt(2*g*r)\n",
        "  return float(ve)\n",
        "\n",
        "G=6.674*10**-11\n",
        "def velocidad_orbital(M,r,a):\n",
        "  vel= sqrt(2*G*M*((1/r)-(1/(2*a))))\n",
        "  return vel\n",
        "\n",
        "def catenaria(x,a):\n",
        "  y = a*cosh(x/a)\n",
        "  return y\n",
        "\n",
        "#------------------------------------------------------------------------\n"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "........................................\n",
            "----------------------------------------------------------------------\n",
            "Ran 40 tests in 0.041s\n",
            "\n",
            "OK\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<unittest.main.TestProgram at 0x7fa570fd2b70>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 1
        }
      ]
    }
  ]
}